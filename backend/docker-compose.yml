services:
  user-service:
    build: 
      context: .docker/php
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "6000:6001"
    volumes:
      - ./user-service:/var/www:cached
    networks:
      - microservices-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6001/"]
      timeout: 5s
      retries: 3
      interval: 30s
      start_period: 20s
  mysql:
    build:
      context: .docker/database/mysql
      dockerfile: Dockerfile
    container_name: microservices-mysql
    restart: unless-stopped
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-microservices_db}
      MYSQL_USER: ${MYSQL_USER:-microservices_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-microservices_password}
    volumes:
      - mysql_data:/var/lib/mysql
      - .docker/logs:/var/log/mysql
      - .docker/database/mysql/my.cnf:/etc/mysql/conf.d/custom.cnf:ro
      - .docker/database/mysql/sql:/docker-entrypoint-initdb.d:ro
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-root}"]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 40s
  redis:
    build:
      context: .docker/redis
      dockerfile: Dockerfile
    container_name: microservices-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - .docker/logs:/var/log/redis
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      interval: 30s
      start_period: 10s
    sysctls:
      - net.core.somaxconn=65535

  krakend:
    build:
      context: .docker/krakenD
      dockerfile: Dockerfile
    container_name: microservices-krakend
    restart: unless-stopped
    ports:
      - "8080:8080"  # API Gateway port
      - "8090:8090"  # Metrics port
    volumes:
      - .docker/logs:/var/log/krakend
      - .docker/krakenD/krakend.json:/etc/krakend/krakend.json:ro
    networks:
      - microservices-network
    depends_on:
      user-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/__health"]
      timeout: 5s
      retries: 3
      interval: 30s
      start_period: 10s

  nginx:
    build:
      context: .docker/nginx
      dockerfile: Dockerfile
    container_name: microservices-nginx
    restart: unless-stopped
    ports:
      - "80:80"     # Main web server port
      - "443:443"   # HTTPS port (for future SSL)
    volumes:
      - ./user-service:/var/www:cached
      - .docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - .docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - .docker/logs:/var/log/nginx
    networks:
      - microservices-network
    depends_on:
      krakend:
        condition: service_healthy
      user-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      timeout: 3s
      retries: 3
      interval: 30s
      start_period: 5s

networks:
  microservices-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local